问题：树中每条边都有一个正权重，求树中每一个节点所能到达的最远距离。
思路：
每一个节点所能到达的最远距离必然在该节点到达某个叶子节点时取得。
记dist[i][j]表示节点i到节点j的距离，SLeaf为叶子节点的集合，则每个节点所能达到的最远距离为max({dist[i][j]:j in SLeaf})
cp[i][j]表示节点i,j的公共祖先，则dist[i][j]=dist[i][cp[i][j]]+dist[j][cp[i][j]]。
每一个节点到自己祖先的节点的距离可以使用深度优先遍历一次树时维护获得，由于每个节点最多维护V层祖先，共有V个节点，所以时间复杂度上界为O(V^2)
对于任意节点i,j的公共祖先的维护，若i,j的层次相同level[i]==level[j]，有cp[i][j]=cp[parent[i]][parent[j]],若i,j层次不同不妨设level[i]<level[j],
则cp[i][j]=cp[parent[i]][levelParent[j][level[i]]],层次信息与parent信息都可以在深度优先遍历时获得，时间复杂度上界同样为O（V^2）
最后根据dist[i][j]找到每一个节点能到达的最远距离即可，时间复杂度O(v^2)。
